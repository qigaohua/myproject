!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
HLIST_HEAD	list.h	568;"	d
HLIST_HEAD_INIT	list.h	567;"	d
INIT_HLIST_HEAD	list.h	569;"	d
INIT_HLIST_NODE	list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
LIST_HEAD	list.h	24;"	d
LIST_HEAD_INIT	list.h	22;"	d
_LINUX_LIST_H	list.h	2;"	d
__WORK_Q_H_	workq.h	2;"	d
__hlist_del	list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_cut_position	list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_del_entry	list.h	/^static inline void __list_del_entry(struct list_head *entry)$/;"	f
__list_splice	list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f
args	workq.h	/^    void *args;$/;"	m	struct:workr
cond	workq.h	/^    pthread_cond_t cond;$/;"	m	struct:work_queue
container_of	list.h	6;"	d
entry	workq.h	/^    struct list_head entry;$/;"	m	struct:workr	typeref:struct:workr::list_head
first	list.h	/^    struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
func	workq.h	/^    work_func_t func;$/;"	m	struct:workr
hlist_add_after	list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_fake	list.h	/^static inline void hlist_add_fake(struct hlist_node *n)$/;"	f
hlist_add_head	list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	list.h	660;"	d
hlist_entry_safe	list.h	669;"	d
hlist_for_each	list.h	662;"	d
hlist_for_each_entry	list.h	680;"	d
hlist_for_each_entry_continue	list.h	690;"	d
hlist_for_each_entry_from	list.h	700;"	d
hlist_for_each_entry_safe	list.h	711;"	d
hlist_for_each_safe	list.h	665;"	d
hlist_head	list.h	/^struct hlist_head {$/;"	s
hlist_move_list	list.h	/^static inline void hlist_move_list(struct hlist_head *old,$/;"	f
hlist_node	list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_cut_position	list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	list.h	342;"	d
list_first_entry	list.h	353;"	d
list_first_entry_or_null	list.h	364;"	d
list_for_each	list.h	372;"	d
list_for_each_entry	list.h	410;"	d
list_for_each_entry_continue	list.h	446;"	d
list_for_each_entry_continue_reverse	list.h	460;"	d
list_for_each_entry_from	list.h	473;"	d
list_for_each_entry_reverse	list.h	421;"	d
list_for_each_entry_safe	list.h	484;"	d
list_for_each_entry_safe_continue	list.h	500;"	d
list_for_each_entry_safe_from	list.h	516;"	d
list_for_each_entry_safe_reverse	list.h	531;"	d
list_for_each_prev	list.h	380;"	d
list_for_each_prev_safe	list.h	399;"	d
list_for_each_safe	list.h	389;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_is_last	list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_is_singular	list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	list.h	434;"	d
list_replace	list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
list_replace_init	list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_rotate_left	list.h	/^static inline void list_rotate_left(struct list_head *head)$/;"	f
list_safe_reset_next	list.h	549;"	d
list_splice	list.h	/^static inline void list_splice(const struct list_head *list,$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_splice_tail	list.h	/^static inline void list_splice_tail(struct list_head *list,$/;"	f
list_splice_tail_init	list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f
listadd	list.h	/^static inline void listadd(struct list_head *new, struct list_head *head)$/;"	f
logw	workq.c	12;"	d	file:
loop	workq.h	/^    int loop;$/;"	m	struct:work_queue
main	workq.c	/^int main(int argc, char *argv[])$/;"	f
mutex	workq.h	/^    pthread_mutex_t mutex;$/;"	m	struct:work_queue
name	workq.h	/^    char *name;$/;"	m	struct:work_queue
next	list.h	/^    struct hlist_node *next;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	list.h	/^    struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
pprev	list.h	/^    struct hlist_node **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
prev	list.h	/^    struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
timeout	workq.h	/^    struct timeval timeout;$/;"	m	struct:workr	typeref:struct:workr::timeval
tttt	workq.c	/^void tttt(void *args)$/;"	f
wlist	workq.h	/^    struct list_head wlist;$/;"	m	struct:work_queue	typeref:struct:work_queue::list_head
work_func_t	workq.h	/^typedef void (*work_func_t)(void *args);$/;"	t
work_queue	workq.h	/^typedef struct work_queue {$/;"	s
work_queue_t	workq.h	/^} work_queue_t;$/;"	t	typeref:struct:work_queue
workq_add	workq.c	/^int workq_add(work_queue_t *wq, work_func_t func, void *args,$/;"	f
workq_create	workq.c	/^work_queue_t * workq_create(const char *workq_name)$/;"	f
workq_del	workq.c	/^void workq_del(work_queue_t *wq, workr_t *w)$/;"	f
workq_destory	workq.c	/^void workq_destory(work_queue_t *wq)$/;"	f
workq_start	workq.c	/^void workq_start(work_queue_t *wq)$/;"	f
workq_thread	workq.c	/^void * workq_thread(void *args)$/;"	f
workr	workq.h	/^typedef struct workr {$/;"	s
workr_t	workq.h	/^} workr_t;$/;"	t	typeref:struct:workr
wq	workq.h	/^    struct work_queue *wq;$/;"	m	struct:workr	typeref:struct:workr::work_queue
